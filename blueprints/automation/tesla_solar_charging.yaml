blueprint:
  name: "Tesla Solar Charging w/ Forecast & Modes (GoodWe)"
  description: "Smart charging with solar forecasts, multiple modes, and battery protection."
  domain: automation
  input:
    # Required Entities
    tesla_charger:
      name: "Tesla Charger Entity"
      selector:
        entity:
          domain: binary_sensor
          device_class: plug
    solar_production:
      name: "Solar Production Sensor"
      selector:
        entity:
          domain: sensor
    battery_soc:
      name: "Battery SOC Sensor"
      selector:
        entity:
          domain: sensor
    grid_import:
      name: "Grid Import Sensor"
      selector:
        entity:
          domain: sensor

    # Forecast Integration (Solcast/OpenWeather)
    solar_forecast:
      name: "Solar Forecast Sensor"
      selector:
        entity:
          domain: sensor
      description: "e.g., solcast.total_kwh_forecast_today"

    # User-Selectable Mode
    charging_mode:
      name: "Charging Mode"
      selector:
        select:
          options:
            - "Surplus Only (PV+Battery)"
            - "Trip Prep (Charge to X%)"
            - "Stop (No Charging)"
          mode: dropdown
      default: "Surplus Only (PV+Battery)"

    # Thresholds
    trip_soc_target:
      name: "Trip SOC Target (%)"
      default: 90
      selector:
        number:
          min: 50
          max: 100
          step: 5
      description: "Only used in 'Trip Prep' mode"

trigger:
  # Re-evaluate every 15 mins or when solar/forecast changes
  - platform: time_pattern
    minutes: "/15"
  - platform: state
    entity_id: !input solar_forecast
  - platform: state
    entity_id: !input solar_production

condition:
  # Only run if Tesla is plugged in
  - condition: state
    entity_id: !input tesla_charger
    state: "on"

action:
  - choose:
      # MODE 1: Surplus Only (Default)
      - conditions:
          - condition: template
            value_template: "{{ charging_mode == 'Surplus Only (PV+Battery)' }}"
        sequence:
          - service: variable.set_variable
            data:
              entity_id: var.ev_charge_policy
              value: "Surplus"
          - if:
              - condition: and
                conditions:
                  - condition: template
                    value_template: >
                      {{ (states(!input.solar_production) | float > 3000) or
                         (states(!input.solar_forecast) | float > 5) and
                         (states(!input.battery_soc) | float >= 75) }}
            then:
              - service: tesla.start_charging
                target:
                  entity_id: !input tesla_charger
              - service: notify.mobile_app
                data:
                  message: >
                    âš¡ Charging STARTED (Mode: Surplus).
                    Solar: {{ states(!input.solar_production) }}W â†’
                    Forecast: {{ states(!input.solar_forecast) }}kWh
            else:
              - service: tesla.stop_charging
                target:
                  entity_id: !input tesla_charger

      # MODE 2: Trip Prep (Charge to X%)
      - conditions:
          - condition: template
            value_template: "{{ charging_mode == 'Trip Prep (Charge to X%)' }}"
        sequence:
          - service: variable.set_variable
            data:
              entity_id: var.ev_charge_policy
              value: "TripPrep"
          - if:
              - condition: template
                value_template: >
                  {{ states('sensor.tesla_battery_level') | float < !input trip_soc_target }}
            then:
              - service: tesla.start_charging
                target:
                  entity_id: !input tesla_charger
              - service: notify.mobile_app
                data:
                  message: >
                    ðŸš— Charging to {{ !input trip_soc_target }}% (Trip Prep Mode).
                    Current: {{ states('sensor.tesla_battery_level') }}%

      # MODE 3: Stop All Charging
      - conditions:
          - condition: template
            value_template: "{{ charging_mode == 'Stop (No Charging)' }}"
        sequence:
          - service: tesla.stop_charging
            target:
              entity_id: !input tesla_charger
          - service: variable.set_variable
            data:
              entity_id: var.ev_charge_policy
              value: "Stopped"
    default: []
